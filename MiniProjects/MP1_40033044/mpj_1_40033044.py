# -*- coding: utf-8 -*-
"""MPJ-1-40033044.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rewUMaeWqUHdpW1PZCvgUAnzyhOcuneM

# 1- Data
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.ndimage import uniform_filter1d
from scipy.stats import zscore
from sklearn.decomposition import PCA
from sklearn.linear_model import LinearRegression, Ridge, Lasso, LogisticRegression
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.feature_selection import SelectKBest, f_regression
from scipy import stats

!wget https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv

columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
df = pd.read_csv('pima-indians-diabetes.data.csv', header=None, names=columns)
display(df)

# Assuming your DataFrame is called df
pd.set_option('display.max_rows', 768)
pd.set_option('display.max_columns', 9)

print(df.shape)
print('Pregnancies             ', df['Pregnancies'].shape)
print('Glucose                 ', df['Glucose'].shape)
print('BloodPressure           ', df['BloodPressure'].shape)
print('SkinThickness           ', df['SkinThickness'].shape)
print('Insulin                 ',df['Insulin'].shape)
print('BMI                     ', df['BMI'].shape)
print('DiabetesPedigreeFunction', df['DiabetesPedigreeFunction'].shape)
print('Age                     ', df['Age'].shape)
print('Outcome                 ', df['Outcome'].shape)

"""# 2- Preprocessing"""

cols_with_zeros = ['Glucose', 'BloodPressure', 'SkinThickness', 'BMI']
df[cols_with_zeros] = df[cols_with_zeros].replace(0, np.nan)
df.fillna(df.median(), inplace=True)

# Remove outliers using Z-score
z_scores = np.abs(stats.zscore(df.drop(columns='Outcome')))
df_clean = df[(z_scores < 3).all(axis=1)]

# Separate features and target
X = df_clean.drop(columns=['Glucose'])
y = df_clean['Glucose']

# Feature selection (top 6 features)
X_selected = SelectKBest(score_func=f_regression, k=6).fit_transform(X, y)

"""# 3- Split"""

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.2, random_state=42)

"""# 4- Regression"""

# Define regression models
models = {
    "Linear Regression": Pipeline([("scaler", StandardScaler()), ("model", LinearRegression())]),
    "Ridge Regression": Pipeline([("scaler", StandardScaler()), ("model", Ridge(alpha=1.0))]),
    "Lasso Regression": Pipeline([("scaler", StandardScaler()), ("model", Lasso(alpha=0.01))]),
    "Polynomial Regression": Pipeline([
        ("poly", PolynomialFeatures(degree=2, include_bias=False)),
        ("scaler", StandardScaler()),
        ("model", LinearRegression())
    ]),
    "KNN Regression": Pipeline([("scaler", StandardScaler()), ("model", KNeighborsRegressor(n_neighbors=3))]),
    "SVR": Pipeline([("scaler", StandardScaler()), ("model", SVR(C=10.0, epsilon=0.1))]),
    "Decision Tree": Pipeline([("model", DecisionTreeRegressor(max_depth=6, random_state=42))]),
    "Random Forest": Pipeline([("model", RandomForestRegressor(n_estimators=200, max_depth=12, random_state=42))]),
    "Bayesian Linear": Pipeline([("scaler", StandardScaler()), ("model", BayesianRidge())])
}

"""# 5- Evaluation"""

# Train and evaluate models
results = []
for name, pipeline in models.items():
    pipeline.fit(X_train, y_train)
    predictions = pipeline.predict(X_test)
    mse = mean_squared_error(y_test, predictions)
    r2 = r2_score(y_test, predictions)
    results.append((name, mse, r2))

# Return results
results_df = pd.DataFrame(results, columns=["Model", "MSE", "R2_Score"]).sort_values(by="MSE")
results_df